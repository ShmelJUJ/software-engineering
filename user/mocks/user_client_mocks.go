// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ShmelJUJ/software-engineering/user/gen (interfaces: Handler)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/user_client_mocks.go github.com/ShmelJUJ/software-engineering/user/gen Handler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	user "github.com/ShmelJUJ/software-engineering/user/gen"
	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// GetAuthToken mocks base method.
func (m *MockHandler) GetAuthToken(arg0 context.Context, arg1 user.OptAuthRequest) (user.GetAuthTokenRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthToken", arg0, arg1)
	ret0, _ := ret[0].(user.GetAuthTokenRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthToken indicates an expected call of GetAuthToken.
func (mr *MockHandlerMockRecorder) GetAuthToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken", reflect.TypeOf((*MockHandler)(nil).GetAuthToken), arg0, arg1)
}

// GetClientById mocks base method.
func (m *MockHandler) GetClientById(arg0 context.Context, arg1 user.GetClientByIdParams) (user.GetClientByIdRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientById", arg0, arg1)
	ret0, _ := ret[0].(user.GetClientByIdRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientById indicates an expected call of GetClientById.
func (mr *MockHandlerMockRecorder) GetClientById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientById", reflect.TypeOf((*MockHandler)(nil).GetClientById), arg0, arg1)
}

// GetWalletById mocks base method.
func (m *MockHandler) GetWalletById(arg0 context.Context, arg1 user.GetWalletByIdParams) (user.GetWalletByIdRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletById", arg0, arg1)
	ret0, _ := ret[0].(user.GetWalletByIdRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletById indicates an expected call of GetWalletById.
func (mr *MockHandlerMockRecorder) GetWalletById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletById", reflect.TypeOf((*MockHandler)(nil).GetWalletById), arg0, arg1)
}
