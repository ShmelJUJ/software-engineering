// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ShmelJUJ/software-engineering/pkg/monitor_client/models"
)

// ProcessReader is a Reader for the Process structure.
type ProcessReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProcessReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProcessOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProcessBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProcessForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProcessInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /monitor/process] process", response, response.Code())
	}
}

// NewProcessOK creates a ProcessOK with default headers values
func NewProcessOK() *ProcessOK {
	return &ProcessOK{}
}

/*
ProcessOK describes a response with status code 200, with default header values.

Request successfully processed.
*/
type ProcessOK struct {
	Payload models.ProcessResponse
}

// IsSuccess returns true when this process o k response has a 2xx status code
func (o *ProcessOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this process o k response has a 3xx status code
func (o *ProcessOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this process o k response has a 4xx status code
func (o *ProcessOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this process o k response has a 5xx status code
func (o *ProcessOK) IsServerError() bool {
	return false
}

// IsCode returns true when this process o k response a status code equal to that given
func (o *ProcessOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the process o k response
func (o *ProcessOK) Code() int {
	return 200
}

func (o *ProcessOK) Error() string {
	return fmt.Sprintf("[POST /monitor/process][%d] processOK  %+v", 200, o.Payload)
}

func (o *ProcessOK) String() string {
	return fmt.Sprintf("[POST /monitor/process][%d] processOK  %+v", 200, o.Payload)
}

func (o *ProcessOK) GetPayload() models.ProcessResponse {
	return o.Payload
}

func (o *ProcessOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProcessBadRequest creates a ProcessBadRequest with default headers values
func NewProcessBadRequest() *ProcessBadRequest {
	return &ProcessBadRequest{}
}

/*
ProcessBadRequest describes a response with status code 400, with default header values.

Validation error.
*/
type ProcessBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this process bad request response has a 2xx status code
func (o *ProcessBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this process bad request response has a 3xx status code
func (o *ProcessBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this process bad request response has a 4xx status code
func (o *ProcessBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this process bad request response has a 5xx status code
func (o *ProcessBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this process bad request response a status code equal to that given
func (o *ProcessBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the process bad request response
func (o *ProcessBadRequest) Code() int {
	return 400
}

func (o *ProcessBadRequest) Error() string {
	return fmt.Sprintf("[POST /monitor/process][%d] processBadRequest  %+v", 400, o.Payload)
}

func (o *ProcessBadRequest) String() string {
	return fmt.Sprintf("[POST /monitor/process][%d] processBadRequest  %+v", 400, o.Payload)
}

func (o *ProcessBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ProcessBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProcessForbidden creates a ProcessForbidden with default headers values
func NewProcessForbidden() *ProcessForbidden {
	return &ProcessForbidden{}
}

/*
ProcessForbidden describes a response with status code 403, with default header values.

Forbidden error.
*/
type ProcessForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this process forbidden response has a 2xx status code
func (o *ProcessForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this process forbidden response has a 3xx status code
func (o *ProcessForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this process forbidden response has a 4xx status code
func (o *ProcessForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this process forbidden response has a 5xx status code
func (o *ProcessForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this process forbidden response a status code equal to that given
func (o *ProcessForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the process forbidden response
func (o *ProcessForbidden) Code() int {
	return 403
}

func (o *ProcessForbidden) Error() string {
	return fmt.Sprintf("[POST /monitor/process][%d] processForbidden  %+v", 403, o.Payload)
}

func (o *ProcessForbidden) String() string {
	return fmt.Sprintf("[POST /monitor/process][%d] processForbidden  %+v", 403, o.Payload)
}

func (o *ProcessForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ProcessForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProcessInternalServerError creates a ProcessInternalServerError with default headers values
func NewProcessInternalServerError() *ProcessInternalServerError {
	return &ProcessInternalServerError{}
}

/*
ProcessInternalServerError describes a response with status code 500, with default header values.

Internal server error.
*/
type ProcessInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this process internal server error response has a 2xx status code
func (o *ProcessInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this process internal server error response has a 3xx status code
func (o *ProcessInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this process internal server error response has a 4xx status code
func (o *ProcessInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this process internal server error response has a 5xx status code
func (o *ProcessInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this process internal server error response a status code equal to that given
func (o *ProcessInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the process internal server error response
func (o *ProcessInternalServerError) Code() int {
	return 500
}

func (o *ProcessInternalServerError) Error() string {
	return fmt.Sprintf("[POST /monitor/process][%d] processInternalServerError  %+v", 500, o.Payload)
}

func (o *ProcessInternalServerError) String() string {
	return fmt.Sprintf("[POST /monitor/process][%d] processInternalServerError  %+v", 500, o.Payload)
}

func (o *ProcessInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ProcessInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
