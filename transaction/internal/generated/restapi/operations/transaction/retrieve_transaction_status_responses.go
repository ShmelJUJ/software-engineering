// Code generated by go-swagger; DO NOT EDIT.

package transaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ShmelJUJ/software-engineering/transaction/internal/generated/models"
)

// RetrieveTransactionStatusOKCode is the HTTP code returned for type RetrieveTransactionStatusOK
const RetrieveTransactionStatusOKCode int = 200

/*
RetrieveTransactionStatusOK Transaction status successfully retrieved.

swagger:response retrieveTransactionStatusOK
*/
type RetrieveTransactionStatusOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetTransactionStatusResponse `json:"body,omitempty"`
}

// NewRetrieveTransactionStatusOK creates RetrieveTransactionStatusOK with default headers values
func NewRetrieveTransactionStatusOK() *RetrieveTransactionStatusOK {

	return &RetrieveTransactionStatusOK{}
}

// WithPayload adds the payload to the retrieve transaction status o k response
func (o *RetrieveTransactionStatusOK) WithPayload(payload *models.GetTransactionStatusResponse) *RetrieveTransactionStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve transaction status o k response
func (o *RetrieveTransactionStatusOK) SetPayload(payload *models.GetTransactionStatusResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveTransactionStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RetrieveTransactionStatusForbiddenCode is the HTTP code returned for type RetrieveTransactionStatusForbidden
const RetrieveTransactionStatusForbiddenCode int = 403

/*
RetrieveTransactionStatusForbidden Forbidden error.

swagger:response retrieveTransactionStatusForbidden
*/
type RetrieveTransactionStatusForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewRetrieveTransactionStatusForbidden creates RetrieveTransactionStatusForbidden with default headers values
func NewRetrieveTransactionStatusForbidden() *RetrieveTransactionStatusForbidden {

	return &RetrieveTransactionStatusForbidden{}
}

// WithPayload adds the payload to the retrieve transaction status forbidden response
func (o *RetrieveTransactionStatusForbidden) WithPayload(payload *models.ErrorResponse) *RetrieveTransactionStatusForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve transaction status forbidden response
func (o *RetrieveTransactionStatusForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveTransactionStatusForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RetrieveTransactionStatusNotFoundCode is the HTTP code returned for type RetrieveTransactionStatusNotFound
const RetrieveTransactionStatusNotFoundCode int = 404

/*
RetrieveTransactionStatusNotFound Not found error.

swagger:response retrieveTransactionStatusNotFound
*/
type RetrieveTransactionStatusNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewRetrieveTransactionStatusNotFound creates RetrieveTransactionStatusNotFound with default headers values
func NewRetrieveTransactionStatusNotFound() *RetrieveTransactionStatusNotFound {

	return &RetrieveTransactionStatusNotFound{}
}

// WithPayload adds the payload to the retrieve transaction status not found response
func (o *RetrieveTransactionStatusNotFound) WithPayload(payload *models.ErrorResponse) *RetrieveTransactionStatusNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve transaction status not found response
func (o *RetrieveTransactionStatusNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveTransactionStatusNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RetrieveTransactionStatusInternalServerErrorCode is the HTTP code returned for type RetrieveTransactionStatusInternalServerError
const RetrieveTransactionStatusInternalServerErrorCode int = 500

/*
RetrieveTransactionStatusInternalServerError Internal server error.

swagger:response retrieveTransactionStatusInternalServerError
*/
type RetrieveTransactionStatusInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewRetrieveTransactionStatusInternalServerError creates RetrieveTransactionStatusInternalServerError with default headers values
func NewRetrieveTransactionStatusInternalServerError() *RetrieveTransactionStatusInternalServerError {

	return &RetrieveTransactionStatusInternalServerError{}
}

// WithPayload adds the payload to the retrieve transaction status internal server error response
func (o *RetrieveTransactionStatusInternalServerError) WithPayload(payload *models.ErrorResponse) *RetrieveTransactionStatusInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve transaction status internal server error response
func (o *RetrieveTransactionStatusInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveTransactionStatusInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
