// Code generated by go-swagger; DO NOT EDIT.

package transaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ShmelJUJ/software-engineering/transaction/internal/generated/models"
)

// EditTransactionOKCode is the HTTP code returned for type EditTransactionOK
const EditTransactionOKCode int = 200

/*
EditTransactionOK Transaction successfully edited.

swagger:response editTransactionOK
*/
type EditTransactionOK struct {
}

// NewEditTransactionOK creates EditTransactionOK with default headers values
func NewEditTransactionOK() *EditTransactionOK {

	return &EditTransactionOK{}
}

// WriteResponse to the client
func (o *EditTransactionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// EditTransactionBadRequestCode is the HTTP code returned for type EditTransactionBadRequest
const EditTransactionBadRequestCode int = 400

/*
EditTransactionBadRequest Validation error.

swagger:response editTransactionBadRequest
*/
type EditTransactionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewEditTransactionBadRequest creates EditTransactionBadRequest with default headers values
func NewEditTransactionBadRequest() *EditTransactionBadRequest {

	return &EditTransactionBadRequest{}
}

// WithPayload adds the payload to the edit transaction bad request response
func (o *EditTransactionBadRequest) WithPayload(payload *models.ErrorResponse) *EditTransactionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the edit transaction bad request response
func (o *EditTransactionBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EditTransactionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EditTransactionForbiddenCode is the HTTP code returned for type EditTransactionForbidden
const EditTransactionForbiddenCode int = 403

/*
EditTransactionForbidden Forbidden error.

swagger:response editTransactionForbidden
*/
type EditTransactionForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewEditTransactionForbidden creates EditTransactionForbidden with default headers values
func NewEditTransactionForbidden() *EditTransactionForbidden {

	return &EditTransactionForbidden{}
}

// WithPayload adds the payload to the edit transaction forbidden response
func (o *EditTransactionForbidden) WithPayload(payload *models.ErrorResponse) *EditTransactionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the edit transaction forbidden response
func (o *EditTransactionForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EditTransactionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EditTransactionNotFoundCode is the HTTP code returned for type EditTransactionNotFound
const EditTransactionNotFoundCode int = 404

/*
EditTransactionNotFound Not found error.

swagger:response editTransactionNotFound
*/
type EditTransactionNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewEditTransactionNotFound creates EditTransactionNotFound with default headers values
func NewEditTransactionNotFound() *EditTransactionNotFound {

	return &EditTransactionNotFound{}
}

// WithPayload adds the payload to the edit transaction not found response
func (o *EditTransactionNotFound) WithPayload(payload *models.ErrorResponse) *EditTransactionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the edit transaction not found response
func (o *EditTransactionNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EditTransactionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EditTransactionInternalServerErrorCode is the HTTP code returned for type EditTransactionInternalServerError
const EditTransactionInternalServerErrorCode int = 500

/*
EditTransactionInternalServerError Internal server error.

swagger:response editTransactionInternalServerError
*/
type EditTransactionInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewEditTransactionInternalServerError creates EditTransactionInternalServerError with default headers values
func NewEditTransactionInternalServerError() *EditTransactionInternalServerError {

	return &EditTransactionInternalServerError{}
}

// WithPayload adds the payload to the edit transaction internal server error response
func (o *EditTransactionInternalServerError) WithPayload(payload *models.ErrorResponse) *EditTransactionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the edit transaction internal server error response
func (o *EditTransactionInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EditTransactionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
