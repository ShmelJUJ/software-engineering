// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateTransactionRequest create transaction request
//
// swagger:model CreateTransactionRequest
type CreateTransactionRequest struct {

	// money info
	// Required: true
	MoneyInfo *MoneyInfo `json:"money_info"`

	// receiver
	// Required: true
	Receiver *CreateTransactionUserRequest `json:"receiver"`
}

// Validate validates this create transaction request
func (m *CreateTransactionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMoneyInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiver(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTransactionRequest) validateMoneyInfo(formats strfmt.Registry) error {

	if err := validate.Required("money_info", "body", m.MoneyInfo); err != nil {
		return err
	}

	if m.MoneyInfo != nil {
		if err := m.MoneyInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("money_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("money_info")
			}
			return err
		}
	}

	return nil
}

func (m *CreateTransactionRequest) validateReceiver(formats strfmt.Registry) error {

	if err := validate.Required("receiver", "body", m.Receiver); err != nil {
		return err
	}

	if m.Receiver != nil {
		if err := m.Receiver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receiver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receiver")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create transaction request based on the context it is used
func (m *CreateTransactionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMoneyInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReceiver(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTransactionRequest) contextValidateMoneyInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.MoneyInfo != nil {

		if err := m.MoneyInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("money_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("money_info")
			}
			return err
		}
	}

	return nil
}

func (m *CreateTransactionRequest) contextValidateReceiver(ctx context.Context, formats strfmt.Registry) error {

	if m.Receiver != nil {

		if err := m.Receiver.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receiver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receiver")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateTransactionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateTransactionRequest) UnmarshalBinary(b []byte) error {
	var res CreateTransactionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
