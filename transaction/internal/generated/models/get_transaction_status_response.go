// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetTransactionStatusResponse get transaction status response
//
// swagger:model GetTransactionStatusResponse
type GetTransactionStatusResponse struct {

	// transaction status
	// Required: true
	// Enum: [created processed canceled failed succeeded]
	TransactionStatus *string `json:"transaction_status"`
}

// Validate validates this get transaction status response
func (m *GetTransactionStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransactionStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getTransactionStatusResponseTypeTransactionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["created","processed","canceled","failed","succeeded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getTransactionStatusResponseTypeTransactionStatusPropEnum = append(getTransactionStatusResponseTypeTransactionStatusPropEnum, v)
	}
}

const (

	// GetTransactionStatusResponseTransactionStatusCreated captures enum value "created"
	GetTransactionStatusResponseTransactionStatusCreated string = "created"

	// GetTransactionStatusResponseTransactionStatusProcessed captures enum value "processed"
	GetTransactionStatusResponseTransactionStatusProcessed string = "processed"

	// GetTransactionStatusResponseTransactionStatusCanceled captures enum value "canceled"
	GetTransactionStatusResponseTransactionStatusCanceled string = "canceled"

	// GetTransactionStatusResponseTransactionStatusFailed captures enum value "failed"
	GetTransactionStatusResponseTransactionStatusFailed string = "failed"

	// GetTransactionStatusResponseTransactionStatusSucceeded captures enum value "succeeded"
	GetTransactionStatusResponseTransactionStatusSucceeded string = "succeeded"
)

// prop value enum
func (m *GetTransactionStatusResponse) validateTransactionStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getTransactionStatusResponseTypeTransactionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetTransactionStatusResponse) validateTransactionStatus(formats strfmt.Registry) error {

	if err := validate.Required("transaction_status", "body", m.TransactionStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateTransactionStatusEnum("transaction_status", "body", *m.TransactionStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get transaction status response based on context it is used
func (m *GetTransactionStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetTransactionStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetTransactionStatusResponse) UnmarshalBinary(b []byte) error {
	var res GetTransactionStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
