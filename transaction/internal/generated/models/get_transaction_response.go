// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetTransactionResponse get transaction response
//
// swagger:model GetTransactionResponse
type GetTransactionResponse struct {

	// amount
	// Required: true
	Amount *int64 `json:"amount"`

	// currency
	// Required: true
	Currency *string `json:"currency"`

	// method
	// Required: true
	Method *string `json:"method"`

	// receiver
	// Required: true
	Receiver *GetTransactionUserResponse `json:"receiver"`

	// sender
	Sender *GetTransactionUserResponse `json:"sender,omitempty"`

	// status
	// Required: true
	// Enum: [created processed canceled failed succeeded]
	Status *string `json:"status"`
}

// Validate validates this get transaction response
func (m *GetTransactionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetTransactionResponse) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *GetTransactionResponse) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *GetTransactionResponse) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	return nil
}

func (m *GetTransactionResponse) validateReceiver(formats strfmt.Registry) error {

	if err := validate.Required("receiver", "body", m.Receiver); err != nil {
		return err
	}

	if m.Receiver != nil {
		if err := m.Receiver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receiver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receiver")
			}
			return err
		}
	}

	return nil
}

func (m *GetTransactionResponse) validateSender(formats strfmt.Registry) error {
	if swag.IsZero(m.Sender) { // not required
		return nil
	}

	if m.Sender != nil {
		if err := m.Sender.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sender")
			}
			return err
		}
	}

	return nil
}

var getTransactionResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["created","processed","canceled","failed","succeeded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getTransactionResponseTypeStatusPropEnum = append(getTransactionResponseTypeStatusPropEnum, v)
	}
}

const (

	// GetTransactionResponseStatusCreated captures enum value "created"
	GetTransactionResponseStatusCreated string = "created"

	// GetTransactionResponseStatusProcessed captures enum value "processed"
	GetTransactionResponseStatusProcessed string = "processed"

	// GetTransactionResponseStatusCanceled captures enum value "canceled"
	GetTransactionResponseStatusCanceled string = "canceled"

	// GetTransactionResponseStatusFailed captures enum value "failed"
	GetTransactionResponseStatusFailed string = "failed"

	// GetTransactionResponseStatusSucceeded captures enum value "succeeded"
	GetTransactionResponseStatusSucceeded string = "succeeded"
)

// prop value enum
func (m *GetTransactionResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getTransactionResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetTransactionResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get transaction response based on the context it is used
func (m *GetTransactionResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReceiver(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSender(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetTransactionResponse) contextValidateReceiver(ctx context.Context, formats strfmt.Registry) error {

	if m.Receiver != nil {

		if err := m.Receiver.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receiver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receiver")
			}
			return err
		}
	}

	return nil
}

func (m *GetTransactionResponse) contextValidateSender(ctx context.Context, formats strfmt.Registry) error {

	if m.Sender != nil {

		if swag.IsZero(m.Sender) { // not required
			return nil
		}

		if err := m.Sender.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sender")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sender")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetTransactionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetTransactionResponse) UnmarshalBinary(b []byte) error {
	var res GetTransactionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
