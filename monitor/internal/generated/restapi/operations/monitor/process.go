// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ProcessHandlerFunc turns a function with the right signature into a process handler
type ProcessHandlerFunc func(ProcessParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ProcessHandlerFunc) Handle(params ProcessParams) middleware.Responder {
	return fn(params)
}

// ProcessHandler interface for that can handle valid process params
type ProcessHandler interface {
	Handle(ProcessParams) middleware.Responder
}

// NewProcess creates a new http.Handler for the process operation
func NewProcess(ctx *middleware.Context, handler ProcessHandler) *Process {
	return &Process{Context: ctx, Handler: handler}
}

/*
	Process swagger:route POST /monitor/process monitor process

The method is used to process request.
*/
type Process struct {
	Context *middleware.Context
	Handler ProcessHandler
}

func (o *Process) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewProcessParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
