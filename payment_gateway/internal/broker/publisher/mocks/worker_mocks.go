// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ShmelJUJ/software-engineering/payment_gateway/internal/broker/publisher (interfaces: PaymentWorker)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/worker_mocks.go github.com/ShmelJUJ/software-engineering/payment_gateway/internal/broker/publisher PaymentWorker
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	publisher "github.com/ShmelJUJ/software-engineering/payment_gateway/internal/broker/publisher"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentWorker is a mock of PaymentWorker interface.
type MockPaymentWorker struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentWorkerMockRecorder
}

// MockPaymentWorkerMockRecorder is the mock recorder for MockPaymentWorker.
type MockPaymentWorkerMockRecorder struct {
	mock *MockPaymentWorker
}

// NewMockPaymentWorker creates a new mock instance.
func NewMockPaymentWorker(ctrl *gomock.Controller) *MockPaymentWorker {
	mock := &MockPaymentWorker{ctrl: ctrl}
	mock.recorder = &MockPaymentWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentWorker) EXPECT() *MockPaymentWorkerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockPaymentWorker) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockPaymentWorkerMockRecorder) Start(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPaymentWorker)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockPaymentWorker) Stop(arg0 publisher.StopReason) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockPaymentWorkerMockRecorder) Stop(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPaymentWorker)(nil).Stop), arg0)
}
