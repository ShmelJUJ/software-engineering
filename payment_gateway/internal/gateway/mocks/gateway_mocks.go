// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ShmelJUJ/software-engineering/payment_gateway/internal/gateway (interfaces: PaymentGateway)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/gateway_mocks.go github.com/ShmelJUJ/software-engineering/payment_gateway/internal/gateway PaymentGateway
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gateway "github.com/ShmelJUJ/software-engineering/payment_gateway/internal/gateway"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentGateway is a mock of PaymentGateway interface.
type MockPaymentGateway struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentGatewayMockRecorder
}

// MockPaymentGatewayMockRecorder is the mock recorder for MockPaymentGateway.
type MockPaymentGatewayMockRecorder struct {
	mock *MockPaymentGateway
}

// NewMockPaymentGateway creates a new mock instance.
func NewMockPaymentGateway(ctrl *gomock.Controller) *MockPaymentGateway {
	mock := &MockPaymentGateway{ctrl: ctrl}
	mock.recorder = &MockPaymentGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentGateway) EXPECT() *MockPaymentGatewayMockRecorder {
	return m.recorder
}

// CheckStatus mocks base method.
func (m *MockPaymentGateway) CheckStatus(arg0 context.Context, arg1 string) (gateway.PaymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStatus", arg0, arg1)
	ret0, _ := ret[0].(gateway.PaymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckStatus indicates an expected call of CheckStatus.
func (mr *MockPaymentGatewayMockRecorder) CheckStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStatus", reflect.TypeOf((*MockPaymentGateway)(nil).CheckStatus), arg0, arg1)
}

// CreatePayment mocks base method.
func (m *MockPaymentGateway) CreatePayment(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentGatewayMockRecorder) CreatePayment(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentGateway)(nil).CreatePayment), arg0)
}

// Retries mocks base method.
func (m *MockPaymentGateway) Retries() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retries")
	ret0, _ := ret[0].(int)
	return ret0
}

// Retries indicates an expected call of Retries.
func (mr *MockPaymentGatewayMockRecorder) Retries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retries", reflect.TypeOf((*MockPaymentGateway)(nil).Retries))
}

// Timeout mocks base method.
func (m *MockPaymentGateway) Timeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Timeout indicates an expected call of Timeout.
func (mr *MockPaymentGatewayMockRecorder) Timeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeout", reflect.TypeOf((*MockPaymentGateway)(nil).Timeout))
}

// TransactionID mocks base method.
func (m *MockPaymentGateway) TransactionID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionID")
	ret0, _ := ret[0].(string)
	return ret0
}

// TransactionID indicates an expected call of TransactionID.
func (mr *MockPaymentGatewayMockRecorder) TransactionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionID", reflect.TypeOf((*MockPaymentGateway)(nil).TransactionID))
}
